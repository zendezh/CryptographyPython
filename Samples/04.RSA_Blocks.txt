#
#------------------------ RSA-Blocks Encryption & Decryption (Simple case, step 1) ------------------
#
def encode1(s,n,e):
    s=str(s) # making input a string
    r1=sum(ord(s[i])*256^i for i in range (len(s)))
    r2=power_mod(r1,e,n) 
    return r2
#-------------------------------------------------
def decode1(m,n,d):
    n=power_mod(m,d,n)
    n=Integer(n)
    v=[]
    while n != 0 :
        v.append(chr(n % 256))
        n //=256  # this replace n by floor (n/256)
    return ''.join(v)
#-------------------------------------------------
def encode(s,n,e):
    s=str(s) # making input a string
    L=[]
    PL=[]
    m=len(s)/4-1
    for i in [0..m]:
        k=4*i
        PL.append(s[k:k+4])
    if len(s) % 4== 1 :
        PL.append(s[len(s)-1])
    if len(s) % 4== 2 :
        PL.append(s[len(s)-2 : len(s)])
    if len(s) % 4== 3:
        PL.append(s[len(s)-3: len(s)])  
    for i in range (0,len(PL)):
        r=encode1(PL[i],n,e)
        L.append(r)
    return L
#-------------------------------------------------
def decode(L,n,d):
    PL=[]
    for i in range (0,len(L)):
        r=decode1(L[i],n,d)
        PL.append(r)
    return ''.join(PL)
# ----------------------------------------------------
p=next_prime(13^137+1996)
q=next_prime(17^124+2011)
e=next_prime(11^12+13)
n=p*q
#
#------------------->     Publickey is (n,e), but p,q keep secret !
#
pn=(p-1)*(q-1)
d=inverse_mod(e,pn)
#
#--------------------> Private (security) key is (n,d)
#
P1='Someday there will be a new world of shining hope for your family, your fatherland and your mankind'
print(' The plain text : ')
print(P1)
print( )
C=encode(P1,n,e)
print(' Encryption - The Cipher text : ')
print(C)
print( )
print(' Decryption - get back the orignal plain text : ')
P2=decode(C,n,d)
print(P2)