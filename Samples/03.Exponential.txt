#----------------------------Exponential Encryption----------------------------
#                         (Pohlig-Hellman Encryption)
# (4 blocks-)
#
#  ( Add blanks if not divisible by 4)
# 
#------------------------------------------------
def encode1(s,e,p):
    s=str(s) # making input a string
    r1=sum(ord(s[i])*2048^i for i in range (len(s)))
    r2=power_mod(r1,e,p) 
    return r2
#-------------------------------------------------
def decode1(m,d,p):
    n=power_mod(m,d,p)
    n=Integer(n)
    v=[]
    while n != 0 :
        v.append(chr(n % 2048))
        n //=2048  # this replace n by floor (n/2048)
    return ''.join(v)
#-------------------------------------------------
def encode(s,e,p):
    s=str(s) # making input a string
    L=[]
    PL=[]
#    
    if len(s) % 4== 1 :
        s+='   '    # add to s three blanks
    if len(s) % 4== 2 :
        s+='  '     # add to s two blanks
    if len(s) % 4== 3:
        s+=' '     # add to s one blanks
#   
    n=len(s)/4-1
    for i in [0..n]:
        k=4*i
        PL.append(s[k:k+4])
#
    for i in range (0,len(PL)):
        r=encode1(PL[i],e,p)
        L.append(r)
    return L
#-------------------------------------------------
def decode(L,d,p):
    PL=[]
    for i in range (0,len(L)):
        r=decode1(L[i],d,p)
        PL.append(r)
    return ''.join(PL)
#------------------------------------------------------
#
p=next_prime(17^125+11)
e=next_prime(13^15+2)
# The key of the encryption : (e,p)  (Keep secrete, at least keep e !)
d=inverse_mod(e,p-1)
# The key of the decryption : (d,p)  (Keep secrete, at least keep d !)
P1='словами не передать, как я тебя люблю'  # Test
print(' The plain text : ')
print(P1)
print( )
C=encode(P1,e,p)
print(' Encryption - The Cipher text : ')
print(C)
print( )
print(' Decryption - get back the orignal plain text : ')
P2=decode(C,d,p)
print(P2)